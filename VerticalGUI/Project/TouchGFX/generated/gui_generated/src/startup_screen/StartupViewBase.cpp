/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/startup_screen/StartupViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

StartupViewBase::StartupViewBase() :
    hiWaitCounter(0),
    gettingWaitCounter(0),
    flexButtonCallback(this, &StartupViewBase::flexButtonCallbackHandler),
    hi_FadeInEndedCallback(this, &StartupViewBase::hi_FadeInEndedCallbackHandler),
    hi_FadeOutEndedCallback(this, &StartupViewBase::hi_FadeOutEndedCallbackHandler),
    gettingReady_FadeInEndedCallback(this, &StartupViewBase::gettingReady_FadeInEndedCallbackHandler),
    getting_FadeOutEndedCallback(this, &StartupViewBase::getting_FadeOutEndedCallbackHandler),
    takeMin_FadeInEndedCallback(this, &StartupViewBase::takeMin_FadeInEndedCallbackHandler)
{
    box1.setPosition(0, 0, 240, 320);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    TakeMin.setPosition(114, 82, 13, 156);
    TakeMin.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    TakeMin.setLinespacing(0);
    TakeMin.setRotation(TEXT_ROTATE_90);
    TakeMin.setAlpha(0);
    TakeMin.setTypedText(TypedText(T_SINGLEUSEID3));

    GettingReady.setPosition(114, 61, 13, 198);
    GettingReady.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    GettingReady.setLinespacing(0);
    GettingReady.setRotation(TEXT_ROTATE_90);
    GettingReady.setAlpha(0);
    GettingReady.setTypedText(TypedText(T_SINGLEUSEID2));

    Hi.setXY(115, 154);
    Hi.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    Hi.setLinespacing(0);
    Hi.setRotation(TEXT_ROTATE_90);
    Hi.setAlpha(0);
    Hi.setTypedText(TypedText(T_SINGLEUSEID1));

    flexButton1.setBoxWithBorderPosition(0, 0, 240, 320);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
    flexButton1.setPosition(-155, 0, 240, 320);
    flexButton1.setAlpha(0);
    flexButton1.setAction(flexButtonCallback);

    add(box1);
    add(TakeMin);
    add(GettingReady);
    add(Hi);
    add(flexButton1);
}

void StartupViewBase::setupScreen()
{

}

//Handles delays
void StartupViewBase::handleTickEvent()
{
    View::handleTickEvent();
    if(hiWaitCounter > 0)
    {
        hiWaitCounter--;
        if(hiWaitCounter == 0)
        {
            //Hi_FadeOut
            //When HiWait completed fade Hi
            //Fade Hi to alpha:0 with LinearOut easing in 1000 ms (60 Ticks)
            Hi.clearFadeAnimationEndedAction();
            Hi.startFadeAnimation(0, 60, EasingEquations::linearEaseOut);
            Hi.setFadeAnimationEndedAction(hi_FadeOutEndedCallback);
        }
    }
    if(gettingWaitCounter > 0)
    {
        gettingWaitCounter--;
        if(gettingWaitCounter == 0)
        {
            //Getting_FadeOut
            //When GettingWait completed fade GettingReady
            //Fade GettingReady to alpha:0 with LinearOut easing in 1000 ms (60 Ticks)
            GettingReady.clearFadeAnimationEndedAction();
            GettingReady.startFadeAnimation(0, 60, EasingEquations::linearEaseOut);
            GettingReady.setFadeAnimationEndedAction(getting_FadeOutEndedCallback);
        }
    }
}

//Called when the screen is done with transition/load
void StartupViewBase::afterTransition()
{
    //Hi_FadeIn
    //When screen is entered fade Hi
    //Fade Hi to alpha:255 with LinearIn easing in 1000 ms (60 Ticks)
    Hi.clearFadeAnimationEndedAction();
    Hi.startFadeAnimation(255, 60, EasingEquations::linearEaseIn);
    Hi.setFadeAnimationEndedAction(hi_FadeInEndedCallback);
}

void StartupViewBase::hi_FadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::TextArea>& comp)
{
    //HiWait
    //When Hi_FadeIn completed delay
    //Delay for 3000 ms (180 Ticks)
    hiWaitCounter = HIWAIT_DURATION;
}

void StartupViewBase::hi_FadeOutEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::TextArea>& comp)
{
    //GettingReady_FadeIn
    //When Hi_FadeOut completed fade GettingReady
    //Fade GettingReady to alpha:255 with LinearIn easing in 1000 ms (60 Ticks)
    GettingReady.clearFadeAnimationEndedAction();
    GettingReady.startFadeAnimation(255, 60, EasingEquations::linearEaseIn);
    GettingReady.setFadeAnimationEndedAction(gettingReady_FadeInEndedCallback);
}

void StartupViewBase::gettingReady_FadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::TextArea>& comp)
{
    //GettingWait
    //When GettingReady_FadeIn completed delay
    //Delay for 3022 ms (181 Ticks)
    gettingWaitCounter = GETTINGWAIT_DURATION;
}

void StartupViewBase::getting_FadeOutEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::TextArea>& comp)
{
    //TakeMin_FadeIn
    //When Getting_FadeOut completed fade TakeMin
    //Fade TakeMin to alpha:255 with LinearIn easing in 1000 ms (60 Ticks)
    TakeMin.clearFadeAnimationEndedAction();
    TakeMin.startFadeAnimation(255, 60, EasingEquations::linearEaseIn);
    TakeMin.setFadeAnimationEndedAction(takeMin_FadeInEndedCallback);
}

void StartupViewBase::takeMin_FadeInEndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::TextArea>& comp)
{

}

void StartupViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //MovetoBear
        //When flexButton1 clicked change screen to Bear
        //Go to Bear with screen transition towards East
        application().gotoBearScreenSlideTransitionEast();
    }
}
